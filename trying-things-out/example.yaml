---
name: YouTube Actions
version: 1
hosts:
  - youtube.com
  - www.youtube.com
actions:
  - name: Search
    props: 
      searchTerm: Simple
    examples:
      - search for [searchTerm:"dogs"]
      - look up [searchTerm:"dolphins"]
      - show me [searchTerm:"podcasts"]
      - show me videos with [searchTerm:"food"]
      - show me videos of [searchTerm:"new york"]
      - videos of [searchTerm:"turtles"]
      - give me videos of [searchTerm:"people"]
      - search [searchTerm:"eggs"]
    trigger: >
      (props, bot, window, context) => {
        // function would have to be the same name as "name"
        // props would be an object that looks like this: { SearchTerm: "some search string" }
        // bot would be a class with methods to send messages and to invoke other actions

        bot.sendMessage({
          text: "searching for" + props.SearchTerm + "..."
        })

        return window.goToPage("/results?search_query=" + encodeURIComponent(props.SearchTerm))
          .then(_ => {
            let node = document.readNode(".some-class-thing")
            bot.sendMessage({
              text: `Got ${node.content[0]} search results`,
              attachments: [
                "", "", ""
              ]
            })
          })
      }
  - name: GoTo
    props:
      goToPage: Simple
    examples:
      - open [goToPage:"settings"]
      - go to my [goToPage:"settings"]
      - go to [goToPage:"profile"]
      - go to my [goToPage:"profile"]
      - view my [goToPage:"settings"]
      - view [goToPage:"history"]
      - view my [goToPage:"history"]
    trigger: >
      (props, bot, window, context) => {
        // function would have to be the same name as "name"
        // props would be an object that looks like this: { SearchTerm: "some search string" }
        // bot would be a class with methods to send messages and to invoke other actions

        bot.sendMessage({
          text: "searching for" + props.SearchTerm + "..."
        })

        return window.goToPage("/results?search_query=" + encodeURIComponent(props.SearchTerm))
          .then(_ => {
            let node = document.readNode(".some-class-thing")
            bot.sendMessage({
              text: `Got ${node.content[0]} search results`,
              attachments: [
                "", "", ""
              ]
            })
          })
      }
    
  - name: VideoInteractions
    props:
      videoActions: Simple
    examples:
      - '[videoActions:"subscribe"]'
      - '[videoActions:"unsubscribe"]'
      - '[videoActions:"like"]'
      - '[videoActions:"dislike"]'
      - '[videoActions:"like"] the video'
      - '[videoActions:"dislike"] the video'
    trigger: >
      (props, bot, window, context) => {
        // function would have to be the same name as "name"
        // props would be an object that looks like this: { SearchTerm: "some search string" }
        // bot would be a class with methods to send messages and to invoke other actions

        bot.sendMessage({
          text: "searching for" + props.SearchTerm + "..."
        })

        return window.goToPage("/results?search_query=" + encodeURIComponent(props.SearchTerm))
          .then(_ => {
            let node = document.readNode(".some-class-thing")
            bot.sendMessage({
              text: `Got ${node.content[0]} search results`,
              attachments: [
                "", "", ""
              ]
            })
          })
      }
  - name: Selection
    props:
      position: ordinalV2
    examples:
      - play the [position:"first"] video
      - play video [position:"3"]
      - pick the [position:"5th"] video
      - pick video [position:"4"]
      - select [position:"2"]
      - select the [position:"second"] video
      - select the [position:"2nd"] video
      - select video [position:"7"]
    trigger: >
      (props, bot, window, context) => {
        // function would have to be the same name as "name"
        // props would be an object that looks like this: { SearchTerm: "some search string" }
        // bot would be a class with methods to send messages and to invoke other actions

        bot.sendMessage({
          text: "searching for" + props.SearchTerm + "..."
        })

        return window.goToPage("/results?search_query=" + encodeURIComponent(props.SearchTerm))
          .then(_ => {
            let node = document.readNode(".some-class-thing")
            bot.sendMessage({
              text: `Got ${node.content[0]} search results`,
              attachments: [
                "", "", ""
              ]
            })
          })
      }