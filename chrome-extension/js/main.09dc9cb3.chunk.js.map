{"version":3,"sources":["components/sidePanel.js","App.js","serviceWorker.js","index.js"],"names":["SidePanel","id","style","width","zIndex","background","position","top","left","fontFamily","boxShadow","height","display","flexDirection","className","textAlign","color","fontSize","lineHeight","paddingTop","flex","padding","maxWidth","borderRadius","method","action","justifyContent","alignItems","type","placeholder","textDecoration","letterSpacing","textTransform","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA+BeA,G,uLA1BP,OACQ,yBAAKC,GAAG,UAAUC,MAAO,CAACC,MAAO,QAASC,OAAQ,OAAQC,WAAY,UAAWC,SAAU,QAASC,IAAK,IAAKC,KAAM,IAAKC,WAAY,QAASC,UAAW,+BAAgCC,OAAQ,QAASC,QAAS,OAAQC,cAAe,WACtO,yBAAKC,UAAU,iBAAiBb,GAAG,SAASC,MAAO,CAACa,UAAW,SAAUC,MAAO,YAC5E,wBAAId,MAAO,CAACe,SAAU,OAAQC,WAAY,MAAOF,MAAO,OAAQG,WAAY,SAA5E,gBAEJ,yBAAKjB,MAAO,CAACkB,KAAM,EAAGR,QAAS,OAAQC,cAAe,mBAClD,yBAAKX,MAAO,CAACmB,QAAS,oBAAqBT,QAAS,OAAQC,cAAe,gBACvE,yBAAKX,MAAO,CAACmB,QAAS,YAAahB,WAAY,OAAQW,MAAO,QAASC,SAAU,OAAQK,SAAU,QAASC,aAAc,SAA1H,yBAIJ,yBAAKrB,MAAO,CAACmB,QAAS,oBAAqBT,QAAS,OAAQC,cAAe,QACvE,yBAAKX,MAAO,CAACmB,QAAS,YAAahB,WAAY,OAAQW,MAAO,OAAQC,SAAU,OAAQK,SAAU,QAASC,aAAc,SAAzH,0BAKR,0BAAMtB,GAAG,WAAWuB,OAAO,OAAOC,OAAO,IAAIvB,MAAO,CAACU,QAAS,OAAQC,cAAe,MAAOa,eAAgB,UAAWC,WAAY,YAC/H,2BAAOC,KAAK,OAAOC,YAAY,kBAAkB3B,MAAO,CAACkB,KAAM,IAAKf,WAAY,OAAQgB,QAAS,OAAQL,MAAO,OAAQC,SAAU,UAClI,4BAAQW,KAAK,SAAS1B,MAAO,CAAC4B,eAAgB,UAAWT,QAAS,OAAQhB,WAAY,UAAWW,MAAO,QAASe,cAAe,UAAWC,cAAe,OAAQtB,UAAW,OAAQa,aAAc,IAAKN,SAAU,OAAQC,WAAY,IAAKP,OAAQ,SAAnP,c,GAtBAsB,cCWTC,E,iLANX,OACE,kBAAC,EAAD,U,GAHYD,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,0BD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.09dc9cb3.chunk.js","sourcesContent":["import React,{Component} from 'react'; \n\nclass SidePanel extends Component {\n\n    render() {\n        return (\n                <div id=\"sidebar\" style={{width: \"350px\", zIndex: \"9999\", background: \"#f3f3f3\", position: \"fixed\", top: \"0\", left: \"0\", fontFamily: \"arial\", boxShadow: \"4px 0px 16px rgba(0,0,0,0.2)\", height: \"100vh\", display: 'flex', flexDirection: 'column'}}>\n                    <div className=\"sidebar-header\" id=\"header\" style={{textAlign: \"center\", color: \"#F2F7F2\"}}>\n                        <h2 style={{fontSize: \"24px\", lineHeight: \"1.5\", color: \"#333\", paddingTop: \"10px\"}}>Helping Eye</h2>\n                    </div>\n                    <div style={{flex: 1, display: \"flex\", flexDirection: \"column-reverse\"}}>\n                        <div style={{padding: \"15px 5px 15px 5px\", display: \"flex\", flexDirection: \"row-reverse\"}}>\n                            <div style={{padding: \"10px 15px\", background: \"blue\", color: \"white\", fontSize: \"16px\", maxWidth: \"250px\", borderRadius: \"15px\"}}>\n                                Lorem ipsum biiiitch\n                            </div>\n                        </div>\n                        <div style={{padding: \"15px 5px 15px 5px\", display: \"flex\", flexDirection: \"row\"}}>\n                            <div style={{padding: \"10px 15px\", background: \"#ddd\", color: \"#333\", fontSize: \"16px\", maxWidth: \"250px\", borderRadius: \"15px\"}}>\n                                Lorem ipsum biiiitch\n                            </div>\n                        </div>\n                    </div>\n                    <form id=\"text-box\" method=\"POST\" action=\"#\" style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"stretch\", alignItems: \"stretch\"}}>\n                        <input type=\"text\" placeholder=\"Enter a command\" style={{flex: \"1\", background: \"#fff\", padding: \"15px\", color: \"#333\", fontSize: \"20px\"}}/>\n                        <button type=\"submit\" style={{textDecoration: \"initial\", padding: \"15px\", background: \"#8d8dff\", color: \"white\", letterSpacing: \"initial\", textTransform: \"none\", boxShadow: \"none\", borderRadius: \"0\", fontSize: \"20px\", lineHeight: \"1\", height: \"auto\"}}>Send</button>\n                    </form>\n                </div>\n        );\n    }\n}\n\nexport default SidePanel;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport SidePanel from './components/sidePanel.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <SidePanel/> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('helping_eye_container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}