{"version":3,"sources":["components/sidePanel.js","App.js","index.js"],"names":["SidePanel","React","useState","updateState","forceUpdate","useCallback","dummy","from","value","useEffect","_","document","onkeyup","e","ctrlKey","metaKey","which","elem","querySelector","focus","dummyData","changeDummyData","onDummyChange","target","bot","sendMessage","str","length","console","log","unshift","chrome","runtime","onMessage","addListener","request","sender","sendResponse","method","data","trigger","eval","props","userData","changeUserData","onChangeUserData","userResponse","changeUserResponse","onChangeUserResponse","submit","message","host","window","location","onFormSubmit","preventDefault","id","style","width","zIndex","background","position","top","left","fontFamily","boxShadow","height","display","flexDirection","className","textAlign","color","fontSize","lineHeight","paddingTop","flex","overflow","map","item","i","key","padding","maxWidth","borderRadius","onSubmit","action","justifyContent","alignItems","onChange","type","placeholder","textDecoration","letterSpacing","textTransform","App","Component","a","setInterval","getElementById","clearInterval","ReactDOM","render"],"mappings":"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","file":"static/js/main.436c3f8e.chunk.js","sourcesContent":["/* global chrome */\n/* global location */\nimport React,{useState} from 'react'; \n\nexport const SidePanel = () => {\n    const [, updateState] = React.useState();\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n\n    const dummy = [\n        {from: \"BOT\", value: \"Enter a command\"},\n    ];\n\n    React.useEffect(_ => {\n        document.onkeyup = function(e) {\n            if ((e.ctrlKey || e.metaKey) && e.which == 66) {\n                let elem = document.querySelector(\"#HelpingEye____Input\");\n                if (elem);\n                elem.querySelector(\"#HelpingEye____Input\").focus();\n            }\n        };\n    }, []);\n    \n    const [dummyData, changeDummyData] = useState(dummy);\n    const onDummyChange = (e) => changeDummyData(e.target.value);\n\n    const bot = {\n        sendMessage: (str) => {\n            if (str.length <= 0)\n                return;\n            console.log(\"SEND MESSAGE FROM TRIGGER\", str)\n            dummyData.unshift({from: \"BOT\", value: str});\n            forceUpdate();\n        }\n    }\n\n    React.useEffect(() => {\n        console.log(\"SETTING UP LISTENER\")\n        document.querySelector(\"#HelpingEye____Input\").focus();\n        chrome.runtime.onMessage.addListener( (request, sender, sendResponse) => {\n            console.log(\"onMessage\", request, sender, dummyData)\n            if (request.method == \"newBotMessage\") {\n                dummyData.unshift({from: \"BOT\", value: request.data});\n                forceUpdate();\n            } else if (request.method == \"evalTrigger\") {\n                const trigger = eval(request.data);\n                console.log(\"THE TRIGGER\", trigger)\n                trigger(request.props, bot);\n            }\n        })\n        console.log(\"SETUP UP LISTENER\")\n    }, [])\n    \n    const [userData, changeUserData] = useState('');\n    const onChangeUserData = (e) => changeUserData(e.target.value);\n\n    const [userResponse, changeUserResponse] = useState('');\n    const onChangeUserResponse = (e) => changeUserResponse(e.target.value);\n\n\n    const submit = () => {\n        changeUserData('');\n        dummyData.unshift({from: \"HUMAN\", value: userData});\n        forceUpdate();\n        chrome.runtime.sendMessage({method: \"newHumanMessage\", data: {message: userData, host: window.location.host}})\n    }\n\n    const onFormSubmit = (e) => {\n        e.preventDefault();\n        submit();\n    }\n    \n    return (\n            <div id=\"sidebar\" style={{width: \"350px\", zIndex: \"9999\", background: \"#f3f3f3\", position: \"fixed\", top: \"0\", left: \"0\", fontFamily: \"arial\", boxShadow: \"4px 0px 16px rgba(0,0,0,0.2)\", height: \"100vh\", display: 'flex', flexDirection: 'column'}}>\n                <div className=\"sidebar-header\" id=\"header\" style={{textAlign: \"center\", color: \"#F2F7F2\"}}>\n                    <h2 style={{fontSize: \"24px\", lineHeight: \"1.5\", color: \"#333\", paddingTop: \"10px\"}}>Helping Eye</h2>\n                </div>\n                <div style={{flex: 1, display: \"flex\", flexDirection: \"column-reverse\", overflow: \"auto\"}}>\n                    { dummyData.map((item, i) => (\n                        <div key={i} style={{padding: \"15px 5px 15px 5px\", display: \"flex\", flexDirection: (item[\"from\"] === \"BOT\" ? \"row\" : \"row-reverse\")}}>\n                            <div id={i == dummyData.length - 1 ? (\"HelpingEye____LastBubble\") : null} style={{padding: \"10px 15px\", background: (item[\"from\"] === \"BOT\" ? \"#ddd\" : \"blue\"), color: (item[\"from\"] === \"BOT\" ? \"#333\" : \"white\"), fontSize: \"16px\", maxWidth: \"250px\", borderRadius: \"15px\"}}>\n                                {item[\"value\"]}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <form onSubmit={onFormSubmit} id=\"text-box\" method=\"POST\" action=\"#\" style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"stretch\", alignItems: \"stretch\"}}>\n                    <input onChange={onChangeUserData} id=\"HelpingEye____Input\" value={userData} type=\"text\" placeholder=\"Enter a command\" style={{flex: \"1\", background: \"#fff\", padding: \"15px\", color: \"#333\", fontSize: \"20px\"}}/>\n                    <button type=\"submit\" style={{textDecoration: \"initial\", padding: \"15px\", background: \"#8d8dff\", color: \"white\", letterSpacing: \"initial\", textTransform: \"none\", boxShadow: \"none\", borderRadius: \"0\", fontSize: \"20px\", lineHeight: \"1\", height: \"auto\"}}>Send</button>\n                </form>\n            </div>\n    );\n    \n}\n\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport {SidePanel} from './components/sidePanel.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <SidePanel/> \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nlet a = setInterval(_ => {\n    console.log(\"trying\")\n    let elem = document.getElementById('helping_eye_container');\n    if (!elem) return;\n    clearInterval(a);\n    console.log(\"about to call reactDOM!!!\")\n    ReactDOM.render(<App />, document.getElementById('helping_eye_container'));\n}, 150)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}